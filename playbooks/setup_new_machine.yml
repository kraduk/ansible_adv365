---
- hosts: all
  vars:
    s_grps: [ uts, utsb, ut, allow_ssh, dba ] 
    sshd_lines: [ '############ adv365 additions #######', 'AllowGroups ut allow_ssh', 'PermitRootLogin no' ]
    proxy: "{{ lookup('env','ANS_PROXY') }}"
    rs: "{{ lookup('env','RSYNC_PROXY') }}"



  vars_files:
  - ~/.userlist.yml
  
  tasks:
  - name: fix rh repo file
    action: lineinfile dest=/etc/yum.repos.d/cd.repo regexp='^baseurl' line='baseurl=http://172.16.210.1/kickstart/os/RH/EL_{{ansible_distribution_version}}_{{ansible_architecture}}/Server/' state=present 
    when: ansible_distribution == "RedHat"
  
  - name: remove rh repo file if not rh
    action: file path=/etc/yum.repos.d/cd.repo  state=absent 
    when: ansible_distribution != "RedHat"

  - name: fix hosts file
    action: lineinfile dest=/etc/hosts regexp='192.168.253.5\W*GR2A365XMGMTV01' line='192.168.253.5 GR2A365XMGMTV01' state=present 

  - name: sudo checks - dir
    action: file path=/etc/sudoers.d state=directory owner=root mode=0755
  
  - name: sudo checks - include
    action: lineinfile dest=/etc/sudoers regexp="#includedir /etc/sudoers.d" line="#includedir /etc/sudoers.d" state=present create=yes
  
  - name: Add sudo groups
    action: lineinfile dest=/etc/sudoers.d/{{item}} regexp="^\W*%uts " line="%{{item}} ALL=(ALL) ALL" state=present create=yes mode=0440
    with_items: s_grps
  
  - name: sudo checks - ansible
    action: lineinfile dest=/etc/sudoers.d/ansible regexp='^ansible' line='ansible ALL=(ALL)  NOPASSWD:ALL'  state=present create=yes mode=0440

  - name: sshd_tweaks
    action: lineinfile dest=/etc/ssh/sshd_config regexp='^{{item}}' line="{{item}}"  state=present 
    with_items: sshd_lines

  - name: Setup special group
    action: group name={{item}} state=present
    with_items: s_grps

  - name: Setup users groups
    action: group name={{item.key}} state=present
    with_dict: grps

  - name: work out home
    shell:  cd .. ;  pwd  
    register: hd

  - name: add user
    action: user name={{ item.value.name }} state=present group={{item.value.group}} append=yes password={{item.value.password}} groups={{item.value.groups}} comment="{{item.value.comment}}" home={{ hd.stdout }}/{{ item.value.name }} 
    with_dict: users
    ignore_errors: yes


  - name: create .ssh
    action: file path={{ hd.stdout }}/{{ item.value.name }}/.ssh state=directory owner={{ item.value.name }} mode=0700
    with_dict: users

  - name: push keys
    action: copy src=~/.ansible/tmp/{{ item.value.name }}.keys dest={{ hd.stdout }}/{{ item.value.name }}/.ssh/authorized_keys owner={{ item.value.name }} group={{item.value.group}} mode=0600
    with_dict: users

  
  - name: running SHELL commands
    shell: "{{ item }}"
    with_items:
      - sed -e "s/rhgb.*quiet//" -i /boot/grub/menu.lst
      - /usr/sbin/plymouth-set-default-theme details
    ignore_errors: yes

  - name: disable bad services
    service: name={{item}} enabled=no state=stopped
    ignore_errors: yes
    with_items:
      - kudzu 
      - cups 
      - snmptrapd 
      - irda 
      - microcode_ctl 
      - iptables 
      - smartd  
      - nfslock 
      - rpcidmapd 
      - haldaemon 
      - auditd 
      - avahi-daemon 
      - avahi-dnsconfd 
      - gpm 
      - yum-updatesd 
      - xfs 
      - pcscd 
      - xinetd 
      - rpcbind 
      - ocfs2  
      - mdmonitor 
      - lm_sensors  
      - iscsid  
      - iscsi  
      - cpuspeed  
      - bluetooth 
      - autofs
  
  - name: enable good services
    service: name={{item}} enabled=yes state=started
    ignore_errors: yes
    with_items:
      - sshd
      - ntpd
      - ntp
      - exim
      - firstboot

  - name: Copy vmtools up
    unarchive: src=/usr/local/scripts/ansible/files/linux-vmtools.tgz dest=/var/tmp copy=yes

  - name: Setup DNS
    action: lineinfile dest=/etc/resolv.conf regexp='^nameserver {{item}}' line='^nameserver {{item}}' state=present create=yes mode=0644
    with_items:
      - 217.68.64.5
      - 217.68.64.4
      - 217.68.65.60
      - 217.68.65.61

  - name: get any updates
    yum: name=* state=latest

  - name: Put entry in hosts
    action: lineinfile dest=/etc/hosts regexp='^192.168.253.5 ntp' line='192.168.253.5 ntp'

  - name: get gateways
    shell: netstat -rn | awk '$2 ~ /^[1-9]/ {print $2}' | sort -u
    register: gate

  - name: Find ntp.conf
    shell: find /etc/ -type f -name ntp.conf
    register: ntp_loc

  - name: Clean raw ip MGMT box in ntp.conf  pt1
    action: lineinfile dest={{ntp_loc.stdout}} regexp='^server 192.168.253.5'  state=absent create=yes

  - name: Clean raw ip MGMT box in ntp.conf  pt2
    action: lineinfile dest={{ntp_loc.stdout}} regexp='^restrict 192.168.253.5' state=absent

  - name: PUT hosts in ntp.conf t1
    action: lineinfile dest={{ntp_loc.stdout}}  regexp='^restrict {{ item }}' line='restrict {{ item }}'
    with_flattened:
      - gate.stdout_lines
      - ntp

  - name: PUT hosts in in ntp.conf  pt2
    action: lineinfile dest={{ntp_loc.stdout}}  regexp='^server {{item}}' line='server {{item}}' create=yes
    with_flattened:
      - gate.stdout_lines
      - ntp

  - name: stop ntp service
    action: service name={{item}} state=stopped
    with_items:
      - ntp
      - ntpd
    ignore_errors: yes

  - name: do the ntpdate bit
    shell: /usr/sbin/ntpdate {{item}}
    with_flattened:
      - gate.stdout_lines
      - ntp
    ignore_errors: yes

  - name: restart ntp service
    action: service name={{item}} state=restarted enabled=yes
    with_items:
      - ntp
      - ntpd
    ignore_errors: yes


